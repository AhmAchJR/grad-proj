import requests
import urllib.parse
import sys
import argparse
from requests.exceptions import RequestException, HTTPError, ConnectionError, Timeout

def is_valid_url(url):
    """Validate if the input is a proper URL."""
    try:
        result = urllib.parse.urlparse(url)
        return all([result.scheme, result.netloc]) and result.scheme in ['http', 'https']
    except ValueError:
        return False

def make_request(url, timeout=5):
    """Attempt to make an HTTP request to the provided URL with error handling."""
    try:
        # Simulate a server making a request with a custom User-Agent
        headers = {'User-Agent': 'SSRF-Test-Tool/1.0'}
        response = requests.get(url, headers=headers, timeout=timeout, allow_redirects=False)
        response.raise_for_status()  # Raise an exception for bad status codes
        
        print("\n[+] Request Successful!")
        print(f"[+] Status Code: {response.status_code}")
        print(f"[+] Response Headers: {response.headers}")
        print(f"[+] Response Content (first 500 chars): {response.text[:500]}...")
        
        # Check for potential SSRF indicators
        if 'localhost' in url.lower() or '127.0.0.1' in url:
            print("\n[!] WARNING: Request to localhost detected. Potential SSRF to internal systems!")
        if response.headers.get('Server'):
            print(f"[!] Server Info Leaked: {response.headers.get('Server')}")
        
        return True
    
    except ConnectionError:
        print("\n[-] Error: Failed to connect to the server. The host may be unreachable.")
        return False
    except Timeout:
        print("\n[-] Error: The request timed out.")
        return False
    except HTTPError as e:
        print(f"\n[-] HTTP Error: {e.response.status_code} - {e.response.reason}")
        if e.response.status_code == 403:
            print("[-] Access forbidden. This may indicate restricted access or a protected resource.")
        return False
    except RequestException as e:
        print(f"\n[-] Request Error: {str(e)}")
        return False

def main():
    """Main function to run the SSRF testing tool."""
    parser = argparse.ArgumentParser(
        description="SSRF Vulnerability Testing Tool: Tests for SSRF by making HTTP requests to a provided URL.",
        epilog="Use responsibly and only on systems you have permission to test."
    )
    parser.add_argument(
        "url",
        type=str,
        help="The URL to test (e.g., http://example.com)"
    )
    
    try:
        args = parser.parse_args()
        url = args.url.strip()
        
        print("=== SSRF Vulnerability Testing Tool ===")
        print("This tool tests for SSRF by making HTTP requests to a user-provided URL.")
        print("Use responsibly and only on systems you have permission to test.\n")
        
        # Validate URL
        if not url:
            print("[-] Error: No URL provided.")
            return
        if not is_valid_url(url):
            print("[-] Error: Invalid URL. Ensure it includes http:// or https:// and a valid domain.")
            return
        
        print(f"\n[+] Attempting request to: {url}")
        success = make_request(url)
        
        if not success:
            print("[-] Request failed. Check the URL or network conditions.")
        else:
            print("\n[+] Test completed. Review the output for potential SSRF vulnerabilities.")
            
    except KeyboardInterrupt:
        print("\n[!] Operation cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n[-] Unexpected Error: {str(e)}")
        print("[-] Please try again or contact support if the issue persists.")
        sys.exit(1)

if __name__ == "__main__":
    main()